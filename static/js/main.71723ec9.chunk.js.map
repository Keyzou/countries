{"version":3,"sources":["pages/Home.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colorMap","Low income","Lower middle income","Upper middle income","High income: nonOECD","High income: OECD","handleClick","bind","assertThisInitialized","toggleModal","updateIndicatorInfo","testDb","fetchBestWorst","yearsSelect","i","push","value","label","ind","state","selectedCountry","selectedIndicator","indicatorSource","result","modal","indicatorInfo","worldAvg","showWorldAvg","modalRegion","modalYear","selectIncomeGroups","showIncomeGroups","bestWorstCountries","zoom","axios","get","then","r","data","r2","cm","cn","forEach","c","country_code","income_group","country_name","r3","regions","v","setState","previous","objectSpread","countryMap","countryNames","indicators","countryCode","_this$state","find","name","_this$state2","g","properties","ISO_A3","code","_this2","_this$state3","concat","values","countries","cvalues","indicator_value","year","nbPays","moyenne","console","log","_this3","_this$state4","length","index","react_default","a","createElement","key","id","indicator_name","react_tippy","arrow","html","Fragment","max","number_format_default","displayType","thousandSeparator","reactstrap_es","color","min","event","_this4","_this5","_this$state5","selectedText","indicatorList","resultPanel","react_chartkick_esm","thousands","legend","toConsumableArray","indicatorInfoRanking","className","react_fontawesome_index_es","icon","indicatorInfoPanel","title","source_note","position","pill","source_organization","react_select_esm","onChange","e","options","lib","style","width","height","projectionConfig","scale","disableOptimization","geography","Map","geographies","projection","map","onClick","default","fill","getCountryColor","hover","pressed","size","marginBottom","lg","for","type","target","selected","getCountryName","disabled","isOpen","toggle","placeholder","overflowY","check","checked","toggleWorldAverage","toggleIncomeGroups","toggleSelectIncomeGroups","Component","library","add","fas","App","render","BrowserRouter","Switch","Route","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactChartkick","addAdapter","Chart","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.71723ec9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.scss';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Input,\n  Label,\n  FormGroup,\n  Badge,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n  ModalFooter,\n} from 'reactstrap';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from 'react-simple-maps';\nimport Map from 'maps/map.json';\nimport axios from 'axios';\nimport { LineChart } from 'react-chartkick';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport NumberFormat from 'react-number-format';\nimport { Tooltip } from 'react-tippy';\n\nimport Select from 'react-select';\n\nexport default class Home extends Component {\n  colorMap = {\n    'Low income': '#f06f65',\n    'Lower middle income': '#f8b166',\n    'Upper middle income': '#fff389',\n    'High income: nonOECD': '#54d470',\n    'High income: OECD': '#54d470',\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.updateIndicatorInfo = this.updateIndicatorInfo.bind(this);\n    this.testDb = this.testDb.bind(this);\n    this.fetchBestWorst = this.fetchBestWorst.bind(this);\n    const yearsSelect = [];\n    for (let i = 1960; i <= 2010; i += 1) {\n      yearsSelect.push({ value: i, label: i });\n    }\n    let ind = [];\n    this.state = {\n      selectedCountry: '',\n      selectedIndicator: 0,\n      indicatorSource: null,\n      result: null,\n      modal: false,\n      indicatorInfo: null,\n      worldAvg: null,\n      showWorldAvg: false,\n      modalRegion: null,\n      modalYear: 0,\n      selectIncomeGroups: false,\n      showIncomeGroups: true,\n      bestWorstCountries: [],\n      zoom: 1,\n      yearsSelect,\n    };\n    axios.get('http://51.38.36.193:1323/indicators/list').then(r => {\n      ind = r.data;\n      axios.get('http://51.38.36.193:1323/countries').then(r2 => {\n        const cm = {};\n        const cn = {};\n        r2.data.forEach(c => {\n          cm[c.country_code] = c.income_group;\n          cn[c.country_code] = c.country_name;\n        });\n        axios.get('http://51.38.36.193:1323/regions').then(r3 => {\n          const regions = [];\n          r3.data.forEach((v, i) => {\n            if (v === '') return;\n            regions.push({ value: i, label: v });\n          });\n          this.setState(previous => ({\n            ...previous,\n            countryMap: cm,\n            countryNames: cn,\n            indicators: ind,\n            regions,\n          }));\n        });\n      });\n    });\n  }\n\n  getCountryColor(countryCode) {\n    const {\n      selectedCountry,\n      result,\n      countryMap,\n      countryNames,\n      selectIncomeGroups,\n      showIncomeGroups,\n    } = this.state;\n    if (!countryMap || !showIncomeGroups) return '#adb5bd';\n    if (countryCode === selectedCountry) return '#7aa9ee';\n    if (selectIncomeGroups && result) {\n      if (result.find(v => v.name === countryNames[countryCode])) {\n        return '#7aa9ee';\n      }\n    }\n    if (!countryMap[countryCode]) return '#adb5bd';\n    if (!this.colorMap[countryMap[countryCode]]) return '#adb5bd';\n    return this.colorMap[countryMap[countryCode]];\n  }\n\n  getCountryName() {\n    const { selectedCountry, countryNames, selectIncomeGroups } = this.state;\n    if (selectIncomeGroups) return selectedCountry;\n    if (!selectedCountry || selectedCountry === '') return 'None';\n    if (selectedCountry === '-99') return '???';\n    return countryNames[selectedCountry];\n  }\n\n  handleClick(g) {\n    const { selectedIndicator } = this.state;\n    this.setState(() => ({ selectedCountry: g.properties.ISO_A3 }));\n    if (selectedIndicator !== 0) this.testDb(g.properties.ISO_A3);\n  }\n\n  testDb(code) {\n    const { selectedIndicator, selectIncomeGroups } = this.state;\n    axios.get(`http://51.38.36.193:1323/indicators/${selectedIndicator}/${code}/values`).then(r => {\n      const values = {};\n      if (selectIncomeGroups) {\n        this.setState({\n          selectedCountry: r.data.regions.countries.income_group,\n        });\n        axios\n          .get(\n            `http://51.38.36.193:1323/indicators/${selectedIndicator}/incomeGroup/${\n              r.data.regions.countries.income_group\n            }/values`,\n          )\n          .then(r2 => {\n            const cvalues = [];\n\n            r2.data.forEach(v => {\n              const c = {};\n              v.regions.countries.values.forEach(value => {\n                if (!value.indicator_value) return;\n                c[value.year] = value.indicator_value;\n              });\n              cvalues.push({ name: v.regions.countries.country_name, data: c });\n            });\n            this.setState({\n              result: cvalues,\n            });\n          });\n        return;\n      }\n      r.data.regions.countries.values.forEach(v => {\n        if (!v.indicator_value) return;\n        values[v.year] = v.indicator_value;\n      });\n      this.setState({\n        result: values,\n      });\n    });\n\n    axios.get(`http://51.38.36.193:1323/indicators/${selectedIndicator}/worldAvg`).then(r => {\n      const values = {};\n      r.data.forEach(v => {\n        if (v.value.nbPays === 0) return;\n        values[v['_id']] = v.value.moyenne;\n      });\n      this.setState({ worldAvg: values });\n    });\n\n    axios.get(`http://51.38.36.193:1323/indicators/${selectedIndicator}/source`).then(r => {\n      this.setState({ indicatorSource: r.data });\n      console.log(r.data);\n    });\n  }\n\n  toggleWorldAverage() {\n    const { showWorldAvg } = this.state;\n    this.setState({ showWorldAvg: !showWorldAvg });\n  }\n\n  toggleIncomeGroups() {\n    const { showIncomeGroups } = this.state;\n    this.setState({ showIncomeGroups: !showIncomeGroups });\n  }\n\n  toggleSelectIncomeGroups() {\n    const { selectIncomeGroups } = this.state;\n    this.setState({ selectIncomeGroups: !selectIncomeGroups });\n  }\n\n  fetchBestWorst() {\n    const { modalRegion, modalYear, indicators, countryNames } = this.state;\n    if (!modalRegion || modalYear === 0) return;\n    axios\n      .get(`http://51.38.36.193:1323/indicators/bestworst/${modalRegion}/${modalYear}`)\n      .then(r => {\n        const result = [];\n        console.log(r.data.length);\n        r.data.forEach((v, index) => {\n          result.push(\n            <tr key={index}>\n              <td>{indicators.find(i => i.id === v['_id']).indicator_name}</td>\n              <td>\n                <Tooltip\n                  arrow\n                  html={\n                    <>\n                      <h6>{countryNames[v.value.max.code]}</h6>\n                      <span>\n                        <NumberFormat\n                          value={v.value.max.value}\n                          displayType=\"text\"\n                          thousandSeparator\n                        />\n                      </span>\n                    </>\n                  }\n                >\n                  <Badge color=\"success\">{v.value.max.code}</Badge>\n                </Tooltip>\n              </td>\n              <td>\n                <Tooltip\n                  arrow\n                  html={\n                    <>\n                      <h6>{countryNames[v.value.min.code]}</h6>\n                      <span>\n                        <NumberFormat\n                          value={v.value.min.value}\n                          displayType=\"text\"\n                          thousandSeparator\n                        />\n                      </span>\n                    </>\n                  }\n                >\n                  <Badge color=\"danger\">{v.value.min.code}</Badge>\n                </Tooltip>\n              </td>\n            </tr>,\n          );\n        });\n        this.setState({\n          bestWorstCountries: result,\n        });\n      });\n  }\n\n  updateIndicatorInfo(event) {\n    const { selectedIndicator } = this.state;\n    if (event.value === -1) return;\n    axios\n      .get(`http://51.38.36.193:1323/indicators/${selectedIndicator}/bestworst/${event.value}`)\n      .then(r => {\n        const values = r.data;\n        this.setState({\n          indicatorInfo: values,\n        });\n      });\n  }\n\n  toggleModal() {\n    const { modal } = this.state;\n    this.setState({\n      modal: !modal,\n    });\n  }\n\n  render() {\n    // const geographyColor = '#adb5bd';\n    const {\n      selectedCountry,\n      countryNames,\n      modal,\n      result,\n      indicatorSource,\n      indicators,\n      zoom,\n      indicatorInfo,\n      selectIncomeGroups,\n      selectedIndicator,\n      worldAvg,\n      regions,\n      showIncomeGroups,\n      bestWorstCountries,\n      showWorldAvg,\n      yearsSelect,\n    } = this.state;\n    const selectedText = selectIncomeGroups ? 'Income group' : 'Country';\n    const indicatorList = [];\n    let resultPanel = null;\n    if (result) {\n      if (worldAvg && showWorldAvg) {\n        if (selectIncomeGroups) {\n          resultPanel = (\n            <LineChart\n              thousands=\",\"\n              legend={false}\n              data={[{ name: 'World average', data: worldAvg }, ...result]}\n            />\n          );\n        } else {\n          resultPanel = (\n            <LineChart\n              thousands=\",\"\n              data={[\n                { name: 'World average', data: worldAvg },\n                { name: countryNames[selectedCountry], data: result },\n              ]}\n            />\n          );\n        }\n      } else {\n        resultPanel = <LineChart thousands=\",\" legend={false} data={result} />;\n      }\n    }\n    const indicatorInfoRanking = (\n      <>\n        <div className=\"ranking\">\n          <div className=\"rank rank-best\">\n            <FontAwesomeIcon icon=\"thumbs-up\" />\n            <span className=\"country-name\">{indicatorInfo ? indicatorInfo[0].id : ''}</span>\n            <span className=\"value\">\n              <NumberFormat\n                displayType=\"text\"\n                value={indicatorInfo ? indicatorInfo[0].value : 0}\n                thousandSeparator\n              />\n            </span>\n          </div>\n          <div className=\"rank rank-worst\">\n            <FontAwesomeIcon icon=\"thumbs-down\" />\n            <span className=\"country-name\">{indicatorInfo ? indicatorInfo[1].id : ''}</span>\n            <span className=\"value\">\n              <NumberFormat\n                displayType=\"text\"\n                value={indicatorInfo ? indicatorInfo[1].value : 0}\n                thousandSeparator\n              />\n            </span>\n          </div>\n        </div>\n      </>\n    );\n    const indicatorInfoPanel = !result ? null : (\n      <>\n        <h2>Indicator info</h2>\n        Source:{' '}\n        <Tooltip title={indicatorSource.source_note} position=\"bottom\">\n          <Badge color=\"primary\" pill className=\"mr-2\">\n            <FontAwesomeIcon icon=\"info\" />\n          </Badge>\n        </Tooltip>\n        <Tooltip title={indicatorSource.source_organization} position=\"bottom\">\n          <Badge color=\"success\" pill>\n            Organization\n          </Badge>\n        </Tooltip>\n        <Select onChange={e => this.updateIndicatorInfo(e)} options={yearsSelect} />\n        {indicatorInfo ? indicatorInfoRanking : ''}\n      </>\n    );\n    if (indicators) {\n      indicators.forEach(i => {\n        indicatorList.push(\n          <option key={i.id} value={i.id}>\n            {i.indicator_name}\n          </option>,\n        );\n      });\n    }\n\n    return (\n      <>\n        <h1 className=\"display-5 text-center head\">\n          COUN<span className=\"text-primary\">TRIES</span>\n        </h1>\n        <div className=\"app\">\n          <div className=\"map-container\">\n            <ComposableMap\n              className=\"map\"\n              style={{ width: '70%', height: '100%' }}\n              projectionConfig={{ scale: 150 }}\n            >\n              <ZoomableGroup zoom={zoom}>\n                <Geographies disableOptimization geography={Map}>\n                  {(geographies, projection) =>\n                    geographies.map(\n                      (geography, i) =>\n                        geography.properties.ISO_A3 !== 'ATA' && (\n                          <Geography\n                            onClick={() => this.handleClick(geography)}\n                            key={i}\n                            geography={geography}\n                            className=\"country\"\n                            style={{\n                              default: { fill: this.getCountryColor(geography.properties.ISO_A3) },\n                              hover: { fill: '#6c757d' },\n                              pressed: { fill: '#495057' },\n                            }}\n                            projection={projection}\n                          />\n                        ),\n                    )\n                  }\n                </Geographies>\n              </ZoomableGroup>\n            </ComposableMap>\n            <div className=\"map-control\">\n              <div className=\"mc mt-2\">\n                <Button\n                  size=\"lg\"\n                  className=\"mr-3 rounded\"\n                  color=\"danger\"\n                  onClick={() => {\n                    this.setState({ zoom: zoom / 2 });\n                  }}\n                >\n                  <FontAwesomeIcon icon=\"minus\" size=\"xs\" />\n                </Button>\n                <p style={{ marginBottom: 0 }} className=\"font-italic text-light mr-3\">\n                  Zoom: x{zoom}\n                </p>\n                <Button\n                  size=\"lg\"\n                  className=\"rounded\"\n                  color=\"success\"\n                  onClick={() => {\n                    this.setState({ zoom: zoom * 2 });\n                  }}\n                >\n                  <FontAwesomeIcon icon=\"plus\" size=\"xs\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n          <div className=\"result-container\">\n            <h2>Results</h2>\n            {resultPanel}\n            {indicatorInfoPanel}\n          </div>\n        </div>\n        <div className=\"indicatorSelection\">\n          <Container>\n            <Row>\n              <Col lg=\"7\">\n                <Label for=\"indicatorList\">Indicateur:</Label>\n                <Input\n                  style={{ marginBottom: '1rem' }}\n                  type=\"select\"\n                  onChange={e =>\n                    this.setState({\n                      selectedIndicator: e.target.value,\n                    })\n                  }\n                  id=\"indicatorList\"\n                  name=\"indicatorList\"\n                >\n                  <option value=\"0\" selected>\n                    -- Select an indicator --\n                  </option>\n                  {indicatorList}\n                </Input>\n                <p>\n                  Selected {selectedText}: <Badge color=\"primary\">{this.getCountryName()}</Badge>\n                </p>\n                <Button\n                  color=\"primary\"\n                  disabled={selectedCountry === '' || selectedIndicator <= 0}\n                  onClick={() => this.testDb(selectedCountry)}\n                >\n                  Get values\n                </Button>\n                <Button color=\"link\" onClick={this.toggleModal}>\n                  Best/Worst countries for each indicator\n                </Button>\n                <Modal isOpen={modal} toggle={this.toggleModal}>\n                  <ModalHeader toggle={this.toggleModal}>\n                    Best and Worst countries per indicator\n                  </ModalHeader>\n                  <ModalBody>\n                    <Row>\n                      <Col lg=\"6\">\n                        <Select\n                          placeholder=\"Select a year\"\n                          onChange={e => {\n                            this.setState({ modalYear: e.value });\n                          }}\n                          options={yearsSelect}\n                        />\n                      </Col>\n                      <Col lg=\"6\">\n                        <Select\n                          placeholder=\"Select a region\"\n                          onChange={e => {\n                            this.setState({ modalRegion: e.label });\n                          }}\n                          options={regions}\n                        />\n                      </Col>\n                    </Row>\n                    <div className=\"text-right\">\n                      <Button\n                        color=\"primary\"\n                        className=\"mt-2 mb-2\"\n                        size=\"sm\"\n                        onClick={() => this.fetchBestWorst()}\n                      >\n                        Fetch data\n                      </Button>\n                    </div>\n                    <Table style={{ overflowY: 'scroll' }}>\n                      <thead>\n                        <tr>\n                          <th>Indicator name</th>\n                          <th>Best country</th>\n                          <th>Worst country</th>\n                        </tr>\n                      </thead>\n                      <tbody>{bestWorstCountries}</tbody>\n                    </Table>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button color=\"secondary\" onClick={this.toggleModal}>\n                      Close\n                    </Button>{' '}\n                  </ModalFooter>\n                </Modal>\n              </Col>\n              <Col lg=\"5\" className=\"indicator-options\">\n                <h3>Options</h3>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      checked={showWorldAvg}\n                      onChange={() => this.toggleWorldAverage()}\n                    />\n                    World average over the years\n                  </Label>\n                </FormGroup>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      checked={showIncomeGroups}\n                      onChange={() => this.toggleIncomeGroups()}\n                    />\n                    Show income groups on map\n                  </Label>\n                </FormGroup>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      checked={selectIncomeGroups}\n                      onChange={() => this.toggleSelectIncomeGroups()}\n                    />\n                    Select income groups instead of countries\n                  </Label>\n                </FormGroup>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport './App.scss';\nimport 'react-tippy/dist/tippy.css';\n\nlibrary.add(fas);\n\nconst App = () => ({\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    );\n  },\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport ReactChartkick from 'react-chartkick';\nimport Chart from 'chart.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactChartkick.addAdapter(Chart);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}